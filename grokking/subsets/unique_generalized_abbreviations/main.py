"""
Problem Statement #
Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. After replacing these substrings in the actual word by the count of characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.

Example 1:

Input: "BAT"
Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
Example 2:

Input: "code"
Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2",
"2de", "2d1", "3e", "4"
"""

from collections import deque

def generate_generalized_abbreviation(word):
    ans = []
    q = deque()
    q.append(('', 0, 0))
    while q:
        curr, start, count = q.popleft()
        c = ''
        if count != 0:
            c = str(count)
        if start == len(word):
            ans.append(f'{curr}{c}')
        else:
            q.append((curr, start + 1, count + 1)) # We abbreviate
            q.append((f'{curr}{c}{word[start]}', start + 1, 0)) # We don't abbreviate
    return ans

def generate_generalized_abbreviation_recursive(word):
    return recurse(word, '', 0, 0, [])

def recurse(word, curr, start, count, ans):
    c = ''
    if count != 0:
        c = str(count)
    if start == len(word):
        ans.append(f'{curr}{c}')
        return
    recurse(word, curr, start + 1, count + 1, ans) # We abbreviate
    recurse(word, f'{curr}{c}{word[start]}', start + 1, 0, ans) # We don't abbreviate
    return ans
